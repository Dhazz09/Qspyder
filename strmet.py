# Demonstration of Python string methods and dunder methods

def demo_string_methods():
    s = " Hello World123 "
    t = "Python"

    print("Original:", repr(s))

    # Dunder methods (special methods)
    print("\n--- Dunder Methods ---")
    print("Add:", s.__add__(t))  # same as s + t
    print("Contains:", s.__contains__("World"))
    delattr(str, "capitalize") if hasattr(str, "capitalize") else print("delattr skipped")
    print("Dir:", dir(s)[:10], "...")  # show first few attributes
    print("Doc:", str.__doc__.splitlines()[0])
    print("Eq:", s.__eq__(" Hello World123 "))
    print("Format:", "{}!".__format__("Hi"))
    print("GE:", s.__ge__(t))
    print("GetAttribute (upper):", getattr(s, "upper")())
    print("GetItem [1]:", s.__getitem__(1))
    print("GetNewArgs:", s.__getnewargs__())
    print("GetState:", s.__getstate__())
    print("GT:", s.__gt__(t))
    print("Hash:", hash(s))
    print("Init_subclass:", str.__init_subclass__())
    print("Iter:", list(s.__iter__())[:5])
    print("LE:", s.__le__(t))
    print("Len:", s.__len__())
    print("LT:", s.__lt__(t))
    print("Mod:", "{} world".__mod__(("hello",)))
    print("Mul:", s.__mul__(2))
    print("NE:", s.__ne__(t))
    print("New (via type):", str.__new__(str, "NewString"))
    print("Reduce:", s.__reduce__())
    print("Reduce_ex:", s.__reduce_ex__(2))
    print("Repr:", s.__repr__())
    print("RMod:", "%s rocks".__rmod__("Python"))
    print("RMul:", s.__rmul__(2))
    print("SetAttr (dynamic):")
    class X: pass
    setattr(X, "attr", 123); print("Set attr:", X.attr)
    print("Sizeof:", s.__sizeof__())
    print("Str:", s.__str__())
    print("Subclasshook:", str.__subclasshook__(str))

    # Normal string methods
    print("\n--- Normal String Methods ---")
    print("Capitalize:", s.capitalize())
    print("Casefold:", s.casefold())
    print("Center:", t.center(10, "-"))
    print("Count 'l':", s.count("l"))
    print("Encode:", s.encode())
    print("Endswith '123':", s.endswith("123 "))
    print("Expandtabs:", "a\tb".expandtabs(4))
    print("Find 'World':", s.find("World"))
    print("Format:", "My name is {}".format("Alice"))
    print("Format_map:", "{x} + {y}".format_map({"x": 1, "y": 2}))
    print("Index 'World':", s.index("World"))
    print("Isalnum:", "abc123".isalnum())
    print("Isalpha:", "abc".isalpha())
    print("Isascii:", "abc".isascii())
    print("Isdecimal:", "123".isdecimal())
    print("Isdigit:", "123".isdigit())
    print("Isidentifier:", "var1".isidentifier())
    print("Islower:", "hello".islower())
    print("Isnumeric:", "123".isnumeric())
    print("Isprintable:", "abc".isprintable())
    print("Isspace:", "   ".isspace())
    print("Istitle:", "Hello World".istitle())
    print("Isupper:", "HELLO".isupper())
    print("Join:", "-".join(["a", "b", "c"]))
    print("Ljust:", t.ljust(10, "*"))
    print("Lower:", t.lower())
    print("Lstrip:", s.lstrip())
    print("Maketrans + Translate:", "abc".translate(str.maketrans("abc", "123")))
    print("Partition:", s.partition("World"))
    print("Removeprefix:", s.removeprefix(" "))
    print("Removesuffix:", s.removesuffix("123 "))
    print("Replace:", s.replace("World", "Universe"))
    print("Rfind:", s.rfind("l"))
    print("Rindex:", s.rindex("l"))
    print("Rjust:", t.rjust(10, "*"))
    print("Rpartition:", s.rpartition("World"))
    print("Rsplit:", s.rsplit())
    print("Rstrip:", s.rstrip())
    print("Split:", s.split())
    print("Splitlines:", "a\nb\nc".splitlines())
    print("Startswith:", s.startswith(" "))
    print("Strip:", s.strip())
    print("Swapcase:", s.swapcase())
    print("Title:", s.title())
    print("Upper:", s.upper())
    print("Zfill:", t.zfill(10))


if __name__ == "__main__":
    demo_string_methods()
